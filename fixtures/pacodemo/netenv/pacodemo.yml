network:
  availability_zones: 2
  enabled: true
  region: us-west-2
  vpc:
    enable_dns_hostnames: true
    enable_dns_support: true
    enable_internet_gateway: true
    nat_gateway:
      app:
        enabled: true
        availability_zone: 1  # 1, 2, 3, 4, ... | all
        segment: paco.ref netenv.anet.network.vpc.segments.public
        default_route_segments:
          - paco.ref netenv.anet.network.vpc.segments.webapp
    vpn_gateway:
      app:
        enabled: false
    private_hosted_zone:
      enabled: false
      name: example.internal
    security_groups:
      app:
        lb:
          egress:
            - cidr_ip: 0.0.0.0/0
              name: ANY
              protocol: "-1"
          ingress:
            - cidr_ip: 70.68.173.245/32
              from_port: 443
              name: HTTPS
              protocol: tcp
              to_port: 443
            - cidr_ip: 70.68.173.245/32
              from_port: 80
              name: HTTP
              protocol: tcp
              to_port: 80
        webapp:
          egress:
            - cidr_ip: 0.0.0.0/0
              name: ANY
              protocol: "-1"
          ingress:
            - from_port: 80
              name: HTTP
              protocol: tcp
              source_security_group: paco.ref netenv.pacodemo.network.vpc.security_groups.app.lb
              to_port: 80
            - from_port: 22
              to_port: 22
              name: SSH
              protocol: tcp
              source_security_group: paco.ref netenv.pacodemo.network.vpc.security_groups.app.bastion
            - from_port: 80
              to_port: 80
              name: BASTIONHTTP
              protocol: tcp
              source_security_group: paco.ref netenv.pacodemo.network.vpc.security_groups.app.bastion
        bastion:
          egress:
            - cidr_ip: 0.0.0.0/0
              name: ANY
              protocol: "-1"
          ingress:
            - from_port: 22
              name: SSH
              protocol: tcp
              cidr_ip: 70.68.173.245/32
              to_port: 22
        rds:
          ingress:
            - name: AuroraMYSQL
              protocol: "6"
              from_port: 3306
              to_port: 3306
              source_security_group: paco.ref netenv.pacodemo.network.vpc.security_groups.app.webapp
          egress:
            - name: ANY
              cidr_ip: 0.0.0.0/0
              protocol: "-1"
    segments:
      database:
        enabled: true
      public:
        enabled: true
      webapp:
        enabled: true

secrets_manager:
  group:
    app:
      github_access_token:
        enabled: true

backup_vaults:
  myapp:
    enabled: false
    title: "All data for MyApp (myapp) application"
    notification_events:
    - BACKUP_JOB_COMPLETED
    notification_group: admin
    plans:
      ebs_daily:
        title: EBS Daily Backups
        plan_rules:
          - title: Rule For EBS Daily Backups
            schedule_expression: cron(0 7 ? * * *)
            lifecycle_delete_after_days: 7
            lifecycle_move_to_cold_storage_after_days: 5
        selections:
          - title: EBS Daily Backups Selection
            tags:
              - condition_type: STRINGEQUALS
                condition_key: backup
                condition_value: daily
      datbase_daily:
        title: Database Daily Backups
        plan_rules:
          - title: Rule for Database Daily Backups
            schedule_expression: cron(0 7 ? * * *)
            lifecycle_delete_after_days: 7
        selections:
          - title: Database resource
            resources:
             - paco.ref netenv.pacodemo.applications.app.groups.webapp.resources.database

applications:
  app:
    enabled: true
    notifications:
      team_bob:
        groups:
         - bob
        classification: 'performance'
    groups:
      iot:
        type: Application
        order: 100
        enabled: true
        resources:
          testiotbucket:
            type: S3Bucket
            enabled: true
            order: 10
            deletion_policy: "delete"
            account: paco.ref accounts.dev

          raw_analysis:
            type: IoTAnalyticsPipeline
            order: 100
            enabled: true
            title: simple raw test pipeline
            channel_storage:
              bucket: paco.ref netenv.pacodemo.applications.app.groups.iot.resources.testiotbucket
              key_prefix: raw_input/
            pipeline_activities:
              extra_bit:
                activity_type: add_attributes
                attributes:
                  key1: heyguy
                  key2: heynow
              compute_extra:
                activity_type: lambda
                function: paco.ref netenv.anet.applications.iotapp.groups.app.resources.iotfunc
                batch_size: 2
              remove:
                activity_type: remove_attributes
                attribute_list:
                  - "attr1"
              select:
                activity_type: select_attributes
                attribute_list:
                  - "attr1"
              filter:
                activity_type: filter
                filter: "attribute1 > 40 AND attribute2 < 20"
              math:
                activity_type: math
                attribute: "attribute1"
                math: "attribute1 - 10"
            datastore_storage:
              expire_events_after_days: 30
            datasets:
              sample:
                query_action:
                  sql_query: "SELECT * FROM example"
                content_delivery_rules:
                  s3dump:
                    s3_destination:
                      bucket: paco.ref netenv.pacodemo.applications.app.groups.iot.resources.testiotbucket
                      key: "/DataSet/!{iotanalytics:scheduleTime}/!{iotanalytics:versionId}.csv"
                expire_events_after_days: 3
                version_history: 2

          iottopic:
            type: IoTTopicRule
            order: 200
            enabled: true
            title: "Some extra notes"
            actions:
              - awslambda:
                  function: paco.ref netenv.anet.applications.iotapp.groups.app.resources.iotfunc
            aws_iot_sql_version: '2016-03-23'
            rule_enabled: true
            sql: "SELECT * FROM 'iot/myTestTopic'"

          iotpolicy:
            type: IoTPolicy
            order: 210
            enabled: true
            policy_json: ./iot/iot-policy.json
            variables:
              sensor_topic_arn: paco.ref netenv.anet.applications.iotapp.groups.app.resources.iottopic.arn

      cicd:
        type: Deployment
        title: Deployment
        order: 10
        resources:
          deploybucket:
            type: S3Bucket
            enabled: true
            order: 10
            external_resource: true
            bucket_name: "deploy-artifacts"
          codedeploy:
            type: CodeDeployApplication
            order: 20
            compute_platform: "Server"
            deployment_groups:
              deployment:
                title: "My Deployment Group description"
                ignore_application_stop_failures: true
                revision_location_s3:
                    bucket: paco.ref netenv.pacodemo.applications.app.groups.deploybucket
                    bundle_type: "zip"
                    key: 'bigbear.zip'
                role_policies:
                  - name: AppFrontendBucket
                    statement:
                      - effect: Allow
                        action:
                          - s3:*
                        resource:
                          - paco.sub '${paco.ref netenv.pacodemo.applications.app.groups.webapp.resources.origin.arn}/*'
                          - paco.sub '${paco.ref netenv.pacodemo.applications.app.groups.webapp.resources.origin.arn}'
                          - paco.sub '${paco.ref netenv.pacodemo.applications.app.groups.webapp.resources.office_origin.arn}/*'
                          - paco.sub '${paco.ref netenv.pacodemo.applications.app.groups.webapp.resources.office_origin.arn}'
                  - name: CloudFrontInvalidation
                    statement:
                      - effect: Allow
                        action:
                          - cloudfront:GetDistribution
                          - cloudfront:GetDistributionConfig
                          - cloudfront:ListDistributions
                          - cloudfront:CreateInvalidation
                        resource:
                          - '*'
                autoscalinggroups:
                  - paco.ref netenv.pacodemo.applications.app.groups.site.resources.webapp

          pipeline_s3:
            type: S3Bucket
            enabled: true
            order: 10
            bucket_name: "artifacts"
            deletion_policy: "delete"
            account: paco.ref accounts.dev
            policy:
              - aws:
                  - paco.sub '${paco.ref netenv.pacodemo.applications.app.groups.site.resources.webapp.instance_iam_role.arn}'
                effect: 'Allow'
                action:
                  - 's3:Get*'
                  - 's3:List*'
                resource_suffix:
                  - '/*'
                  - ''
          pipeline:
            type: DeploymentPipeline
            order: 20
            enabled: true
            configuration:
              artifacts_bucket: paco.ref netenv.pacodemo.applications.app.groups.cicd.resources.pipeline_s3
              account: paco.ref accounts.dev
            stages:
              source:
                github:
                  type: GitHub.Source
                  enabled: true
                  deployment_branch_name: "master"
                  github_access_token: paco.ref netenv.pacodemo.secretsmanager.group.app.github_access_token
                  github_owner: waterbear-cloud
                  github_repository: example-saas-app
                codecommit:
                  type: CodeCommit.Source
                  enabled: false
                  codecommit_repository: paco.ref resource.codecommit.aimdemo.app
                  deployment_branch_name: "dev"
              invoke:
                image_deploy:
                  type: Lambda.Invoke
                  enabled: true
                  target_lambda: paco.ref netenv.pacodemo.notification.groups.lambda.resources.function
                  user_parameters: '{"action": "start-from-pipeline"}'
      site:
        type: Application
        order: 1
        resources:
          cert:
            type: ACM
            order: 1
            enabled: true
            domain_name: pacodemo.waterbear.cloud
            subject_alternative_names:
              - '*.pacodemo.waterbear.cloud'
          alb:
            type: LBApplication # LBClassic | LBNetwork | LBApplication
            enabled: true
            order: 2
            target_groups:
              app:
                health_check_interval: 30
                health_check_timeout: 10
                healthy_threshold: 2
                unhealthy_threshold: 2
                port: 80
                protocol: HTTP
                health_check_http_code: 200
                health_check_path: /
                connection_drain_timeout: 300
            listeners:
              http:
                port: 80
                protocol: HTTP
                redirect:
                  port: 443
                  protocol: HTTPS
              https:
                port: 443
                protocol: HTTPS
                ssl_certificates:
                  - paco.ref netenv.pacodemo.applications.app.groups.site.resources.cert
                target_group: app
            dns:
              - hosted_zone: paco.ref resource.route53.pacodemo
                domain_name: pacodemo.waterbear.cloud
            scheme: internet-facing
            security_groups:
              - paco.ref netenv.pacodemo.network.vpc.security_groups.app.lb
            segment: public
          esdomain:
            type: ElasticsearchDomain
            order: 1
            enabled: true

          dbparams:
            type: DBParameterGroup
            order: 1
            enabled: true
            description: "Optimized for Performance"
            family: mysql5.7
            parameters:
              block_encryption_mode: aes-128-ecb
              character_set_database: swe7
              time_zone: America/Denver
              slow_query_log: '1'
              long_query_time: '30'
              log_output: FILE
              net_read_timeout: '1800'
              net_write_timeout: '1800'
          database:
            type: RDSMysql
            order: 2
            enabled: true
            engine_version: 5.7.26
            db_instance_type: db.t3.micro
            port: 3306
            storage_type: gp2
            storage_size_gb: 20
            storage_encrypted: true
            multi_az: true
            allow_major_version_upgrade: false
            auto_minor_version_upgrade: true
            publically_accessible: false
            master_username: root
            master_user_password: "secret"
            backup_preferred_window: 08:00-08:30
            backup_retention_period: 7
            maintenance_preferred_window: 'sat:10:00-sat:10:30'
            license_model: "general-public-license"
            cloudwatch_logs_exports:
              - error
              - slowquery
            security_groups:
              - paco.ref netenv.pacodemo.network.vpc.security_groups.app.rds
            segment: paco.ref netenv.pacodemo.network.vpc.segments.database
            primary_domain_name: database.pacodemo.internal
            primary_hosted_zone: paco.ref netenv.pacodemo.network.vpc.private_hosted_zone
            parameter_group: paco.ref netenv.pacodemo.applications.app.groups.site.resources.dbparams
          webapp:
            type: ASG
            order: 3
            enabled: true
            associate_public_ip_address: false
            cooldown_secs: 300
            ebs_optimized: false
            health_check_grace_period_secs: 300
            health_check_type: ELB
            instance_iam_role:
              enabled: true
            instance_ami: ami-01bbe152bf19d0289
            instance_key_pair: paco.ref resource.ec2.keypairs.pacodemo_prod
            instance_monitoring: false
            instance_type: t2.micro
            max_instances: 3
            min_instances: 1
            desired_capacity: 1
            rolling_update_policy:
              enabled: true
              max_batch_size: 1
              min_instances_in_service: 0
              pause_time: PT1M
              wait_on_resource_signals: false
            target_groups:
              - paco.ref netenv.pacodemo.applications.app.groups.site.resources.alb.target_groups.app
            security_groups:
              - paco.ref netenv.pacodemo.network.vpc.security_groups.app.webapp
            segment: webapp
            termination_policies:
              - Default
            cfn_init:
              parameters:
                TestString: 'catdog'
                TestNumber: 10
                Database.endpoint.address: paco.ref netenv.pacodemo.applications.app.groups.site.resources.database
              config_sets:
                ascending:
                  - "config1"
                  - "config2"
                descending:
                  - "config2"
                  - "config1"
              configurations:
                config1:
                  files:
                    # "/fullyaml.txt":
                    #   content:
                    #     Fn::Join:
                    #       - ''
                    #       - - "#!/bin/bash\n"
                    #         - !Ref AWS::StackName
                    #         - !Sub "echo ${Databaseendpointaddress}"
                    #   mode: "000644"
                    #   owner: "root"
                    #   group: "root"
                    "/tmp/local-file":
                      content_cfn_file: ./cfn-init/local-file
                      mode: "000644"
                      owner: "root"
                      group: "root"
                    "/tmp/plain-file":
                      content_file: ./cfn-init/plain-file
                      mode: "000644"
                      owner: "root"
                      group: "root"
                    "/tmp/setup.mysql":
                      content: !Join
                        - ''
                        - - "#!/bin/bash\n"
                          - !Ref AWS::StackName
                          - !Sub
                            - "echo ${MisterGuy}"
                            - MisterGuy: "Howdy"
                          - !Sub "echo ${Databaseendpointaddress}"
                      mode: "000644"
                      owner: "root"
                      group: "root"
                    "/tag.txt":
                      content: |
                        !Join
                        - ''
                        - - "#!/bin/bash\n"
                          - !Ref: AWS::StackName
                        !Ref: SomeLogicalId
                    "/test-file.txt":
                      content: Fn::Sub |
                        TEST FILE ${Databaseendpointaddress};
                      mode: "000644"
                      owner: "root"
                      group: "root"
                  packages:
                    rpm:
                      epel: "http://download.fedoraproject.org/pub/epel/5/i386/epel-release-5-4.noarch.rpm"
                    yum:
                      httpd: []
                      php: []
                      wordpress: []
                    rubygems:
                      chef:
                        - "0.10.2"
                  commands:
                    test:
                      command: "ls"
                      env:
                        CFNTEST: "I come from config1."
                      cwd: "~"
                  services:
                    sysvinit:
                      apache2:
                        enabled: true
                        ensure_running: true
                        commands:
                        - one
                        - two
                        files:
                        - "/etc/cfn/cfn-hup.conf"
                        - "/etc/cfn/hooks.d/cfn-auto-reloader.conf"
                config2:
                  commands:
                    test:
                      command: "echo \"$CFNTEST\" > /root/monkey-test.txt"
                      env:
                        CFNTEST: "I come from config2"
                      cwd: "~"
            monitoring:
              enabled: true
              collection_interval: 60
              asg_metrics:
                - GroupMinSize
                - GroupMaxSize
                - GroupDesiredCapacity
                - GroupInServiceInstances
                - GroupPendingInstances
                - GroupStandbyInstances
                - GroupTerminatingInstances
                - GroupTotalInstances
              metrics:
                - name: swap
                  measurements:
                    - used_percent
                - name: cpu
                  measurements:
                    - usage_user
                    - usage_system
                - name: disk
                  measurements:
                    - free
                  collection_interval: 300
                - name: diskio
                  measurements:
                    - iops_in_progress
                - name: netstat
                  measurements:
                    - tcp_established
                    - tcp_close_wait
                    - tcp_listen
                    - udp_socket
                - name: processes
                  measurements:
                    - total
                    - zombies
            user_data_script: |
              #!/bin/bash

              yum update -y
              yum install httpd ruby wget -y

              # CodeDeploy Agent
              cd /tmp/
              wget https://aws-codedeploy-us-west-2.s3.amazonaws.com/latest/install
              chmod u+x ./install
              ./install auto

              echo "Launch placeholder" > /var/www/html/index.html
              # Restart apache
              apachectl restart

          dashboard:
            type: Dashboard
            enabled: true
            order: 100
            title: Demo-Dashboard
            dashboard_file: ./dashboards/demo.json
            variables:
              WebAsg.name: paco.ref netenv.ci.applications.app.groups.site.resources.webapp

      restapi:
        type: Application
        order: 2
        resources:
          api_gateway_rest_api:
            type: ApiGatewayRestApi
            order: 1
            enabled: true
            body_file_location: 'swagger/pet-store.json'

      bastion:
        type: Bastion
        order: 1
        resources:
          instance:
            type: ASG
            order: 1
            enabled: true
            associate_public_ip_address: true
            cooldown_secs: 300
            desired_capacity: 1
            ebs_optimized: false
            health_check_grace_period_secs: 300
            health_check_type: EC2
            instance_iam_role:
              enabled: false
            #  These are the defaults
            #  assume_role_policy:
            #    effect: Allow
            #    service:
            #        - ec2.amazonaws.com
            #  instance_profile: true
            #  policies:
            instance_ami: ami-01bbe152bf19d0289
            instance_key_pair: paco.ref resource.ec2.keypairs.pacodemo_prod
            instance_monitoring: false
            instance_type: t2.micro
            max_instances: 2
            min_instances: 1
            segment: public
            termination_policies:
              - Default
            security_groups:
              - paco.ref netenv.pacodemo.network.vpc.security_groups.app.bastion
            user_data_script: |
              #!/bin/bash

              yum update -y

  notification:
    groups:
      lambda:
        name: 'Notification'
        type: Service
        order: 20
        resources:
          function:
            type: Lambda
            enabled: true
            order: 1
            description: 'notification service'
            code:
              s3_bucket: paco.ref resource.s3.buckets.bucketland
              s3_key: 'notification-0.1.0.zip'
            iam_role:
              enabled: true
              policies:
                - name: 'S3Access'
                  statement:
                    - effect: Allow
                      action:
                        - 's3:*'
                      resource:
                        - '*'
            handler: 'notification.lambda_handler'
            memory_size: 128
            runtime: 'python3.7'
            timeout: 900
            layers:
              - arn:aws:lambda:eu-central-1:113088814899:layer:Klayers-python37-requests:4

environments:
  demo:
    default:
      secrets_manager:
        group:
          app:
            github_access_token:
              enabled: true
      backup_vaults:
        myapp:
          enabled: true
      applications:
        notification:
          enabled: true
        app:
          enabled: true
          notifications:
            team_bob:
              groups:
              - jim_is_the_new_bob
              classification: 'performance'
          monitoring:
            enabled: true
            health_checks:
              external_ping:
                type: Route53HealthCheck
                load_balancer: "AnetDevMyappWebAlb-1313099095.eu-central-1.elb.amazonaws.com" # make an paco.ref
                health_check_type: 'HTTP'
                port: 80
                resource_path: /
                match_string: "alive!"
                failure_threshold: 3
                latency_graphs: false

          groups:
            restapi:
              resources:
                api_gateway_rest_api:
                  body_file_location: 'swagger/dev-pet-store.json'
            bastion:
              resources:
                instance:
                  monitoring:
                    alarm_sets:
                      instance-health-core:
                      instance-health-cwagent:
            site:
              resources:
                alb:
                  monitoring:
                    alarm_sets:
                      instance-health:
                        HealthyHostCount-Critical:
                          dimensions:
                            - name: LoadBalancer
                              value: paco.ref netenv.anet.applications.app.groups.site.resources.alb
                            - name: TargetGroup
                              value: paco.ref netenv.anet.applications.app.groups.site.resources.alb.target_groups.app
                      response-latency:
                      response-health:
                webapp:
                  max_instances: 3
                  min_instances: 0
                  monitoring:
                    notifications:
                      santaclaus:
                        groups:
                        - santa
                        severity: 'low'
                    log_sets:
                      amazon_linux:
                        expire_events_after_days: '1'
                        log_groups:
                          audit:
                            log_group_name: "puppydog"
                            sources:
                              audit:
                                log_stream_name: "audit-{instance_id}"
                    alarm_sets:
                      log-test:
                      launch-health:
                      instance-health-core:
                      instance-health-cwagent:
                        notifications:
                          alarmsetnotif:
                            groups:
                            - misterteam
                        SwapPercent-Low:
                          evaluation_periods: 15
                          threshold: 10
                          notifications:
                            singlealarm:
                              groups:
                              - oneguygetsthis

      enabled: true
      network:
        aws_account: paco.ref accounts.prod
        name: example
        vpc:
          cidr: 10.0.0.0/16
          segments:
            database:
              az1_cidr: 10.0.5.0/24
              az2_cidr: 10.0.6.0/24
            public:
              az1_cidr: 10.0.1.0/24
              az2_cidr: 10.0.2.0/24
              internet_access: true
            webapp:
              az1_cidr: 10.0.3.0/24
              az2_cidr: 10.0.4.0/24
    us-west-2:
      enabled: true
      applications:
        app{mouse}:
          enabled: true
        app{elephant}:
          enabled: true

    ca-central-1:
      enables: true

  dev:
    default:
      applications:
        app:
          enabled: true
          groups:
            bastion:
              resources:
                instance:
                  instance_key_pair: paco.ref resource.ec2.keypairs.pacodemo_dev
                  desired_capacity: 0 # if you change this you break a test!
                  min_instances: 0
            site:
              resources:
                webapp:
                  max_instances: 2
                  min_instances: 1
                  desired_capacity: 1
                  instance_key_pair: paco.ref resource.ec2.keypairs.pacodemo_dev
                  monitoring:
                    alarm_sets:
                      launch-health:
                      instance-health-core:
                      instance-health-cwagent:
                        SwapPercent-Low:
                          evaluation_periods: 15
                # Must remember to override both 'cert' and 'alb' DNS
                # How can we control override policies like this?
                cert:
                  domain_name: dev.pacodemo.waterbear.cloud
                  # Maybe shorten this to just the subjective hostname.
                  #  Then we don't need to override this field
                  subject_alternative_names:
                    - '*.dev.pacodemo.waterbear.cloud'

                alb:
                  enabled: true
                  dns:
                    - hosted_zone: paco.ref resource.route53.pacodemo_dev
                      domain_name: dev.pacodemo.waterbear.cloud
                  monitoring:
                    alarm_sets:
                      instance-health:
                      response-latency:
                      response-health:
      network:
        aws_account: paco.ref accounts.dev
        availability_zones: 2 # For the ALB
        name: example
        vpc:
          cidr: 10.20.0.0/16
          segments:
            database:
              az1_cidr: 10.20.5.0/24
              az2_cidr: 10.20.6.0/24
            public:
              az1_cidr: 10.20.1.0/24
              az2_cidr: 10.20.2.0/24
              internet_access: true
            webapp:
              az1_cidr: 10.20.3.0/24
              az2_cidr: 10.20.4.0/24
          nat_gateway:
            app:
              enabled: true
    us-west-2:
      enabled: true

